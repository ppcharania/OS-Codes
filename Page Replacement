#include <stdio.h>
int n, nf;
int in[100];
int frame[50];
int hit = 0;
int i, j, k;
int pgfaultcnt = 0;
void getData()
{
    printf("\nEnter length of page reference sequence:");
    scanf("%d", &n);
    printf("\nEnter the page reference sequence:");
    for (i = 0; i < n; i++)
        scanf("%d", &in[i]);
    printf("\nEnter no of frames:");
    scanf("%d", &nf);
}
void initialize()
{
    pgfaultcnt = 0;
    for (i = 0; i < nf; i++)
        frame[i] = 9999;
}

int isHit(int data)
{
    hit = 0;
    for (j = 0; j < nf; j++)
    {
        if (frame[j] == data)
        {
            hit = 1;
            break;
        }
    }
    return hit;
}
int getHitIndex(int data)
{
    int hitind;
    for (k = 0; k < nf; k++)
    {
        if (frame[k] == data)
        {
            hitind = k;
            break;
        }
    }
    return hitind;
}
void dispPages()
{
    for (k = 0; k < nf; k++)
    {
        if (frame[k] != 9999)
            printf(" %d", frame[k]);
    }
}

void dispPgFaultCnt()
{
    printf("\nTotal no of page faults:%d", pgfaultcnt);
}

void fifo()
{
    initialize();
    int top=0;
    for (i = 0; i < n; i++)
    {
        printf("\nFor %d :", in[i]);

        if (isHit(in[i]) == 0)
        {

            frame[top] = in[i];
            top=(top+1)%nf;
            pgfaultcnt++;
            dispPages();
        }
        else
            printf("No page fault");
    }
    dispPgFaultCnt();
}
void optimal()
{
    initialize();

    int least[50];int ind=0;
    for (i = 0; i < n; i++)
    {

        printf("\nFor %d :", in[i]);
    
        if (isHit(in[i]) == 0)
        {

            if(frame[2]==9999)
            {
                frame[ind]=in[i];
                ind++;
            }
            else
            {
                int close[nf];
                for(int j=0;j<nf;j++)
                {
                    close[j]=-1;
                }
                for(int j=0;j<nf;j++)
                {
                    for(int k=i+1;k<=n;k++)
                    {
                        if(in[k]==frame[j])
                        {
                            close[j]=k;
                            break;
                        }
                    }
                }
                int dist=close[0];
                int ind_rep=0;
                for(int j=0;j<nf;j++)
                {
                    if(close[j]==-1)
                    {
                        ind_rep=j;
                        break;
                    }
                    if(close[j]>dist)
                    {
                        dist=close[j];
                        ind_rep=j;
                    }
                }
                frame[ind_rep]=in[i];
            }
            
            pgfaultcnt++;

            dispPages();
        }
        else
            printf("No page fault!");
    }
    dispPgFaultCnt();
}

void lru()
{
    initialize();

    int least[50];int ind=0;
    for (i = 0; i < n; i++)
    {

        printf("\nFor %d :", in[i]);
    
        if (isHit(in[i]) == 0)
        {

            if(frame[2]==9999)
            {
                frame[ind]=in[i];
                ind++;
            }
            else
            {
                int close[nf];
                for(int j=0;j<nf;j++)
                {
                    for(int k=i-1;k>=0;k--)
                    {
                        if(in[k]==frame[j])
                        {
                            close[j]=k;
                            break;
                        }
                    }
                }
                int dist=9999;
                int ind_rep=9999;
                for(int j=0;j<nf;j++)
                {
                    if(close[j]<dist)
                    {
                        dist=close[j];
                        ind_rep=j;
                    }
                }
                frame[ind_rep]=in[i];
            }
            
            pgfaultcnt++;

            dispPages();
        }
        else
            printf("No page fault!");
    }
    dispPgFaultCnt();
}

int main()
{
    int choice;
    while (1)
    {
        printf("\nPage Replacement Algorithms\n1.Enter data\n2.FIFO\n3.Optimal\n4.LRU\n6.Exit\nEnter your choice:");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            getData();
            break;
        case 2:
            fifo();
            break;
        case 3:
            optimal();
            break;
        case 4:
            lru();
            break;
        default:
            return 0;
            break;
        }
    }
}
