#include <stdio.h>

void firstFit(int blockSize[], int m, int processSize[], int n)
{
    int i, j;
    int allocation[n];
    int avail_block[m];
    for (i = 0; i < n; i++)
    {
        allocation[i] = -1;
    }
    for(i=0; i<m; i++)
    {
            avail_block[i]=1;
    }
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if(avail_block[j]==1)
            {
            if (blockSize[j] >= processSize[i])
            {
                allocation[i] = j;
                avail_block[j]=0;
                break;
            }
            }
        }
    }

    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
        printf(" %i\t\t", i + 1);
        printf("%i\t\t", processSize[i]);
        if (allocation[i] != -1)
            printf("%i", allocation[i] + 1);
        else
            printf("Not Allocated");
        printf("\n");
    }
}
void nextFit(int blockSize[], int m, int processSize[], int n)
{
    int i, j;
    int allocation[n];
    int avail_block[m];
    for (i = 0; i < n; i++)
    {
        allocation[i] = -1;
    }
    for(i=0; i<m; i++)
    {
            avail_block[i]=1;
    }
    int temp_index=0;
    for (i = 0; i < n; i++)
    {
        for (j = temp_index; j < m; j++)
        {
            if(avail_block[j]==1)
            {
            if (blockSize[j] >= processSize[i])
            {
                allocation[i] = j;
                avail_block[j]=0;
                temp_index=((j+1)%m);
                break;
            }
            }
        }
    }

    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
        printf(" %i\t\t", i + 1);
        printf("%i\t\t", processSize[i]);
        if (allocation[i] != -1)
            printf("%i", allocation[i] + 1);
        else
            printf("Not Allocated");
        printf("\n");
    }
}

void bestFit(int blockSize[], int m, int processSize[], int n)
{

    int allocation[n];
    int avail_block[m];
    for (int i = 0; i < n; i++)
        allocation[i] = -1;
    for(int i=0; i<m; i++)
    {
            avail_block[i]=1;
    }
    for (int i = 0; i < n; i++)
    {

        int bestIdx = -1;
        for (int j = 0; j < m; j++)
        {
            if (blockSize[j] >= processSize[i] && avail_block[j]==1)
            {
                if (bestIdx == -1)
                    bestIdx = j;
                else if (blockSize[bestIdx] > blockSize[j])
                    bestIdx = j;
            }
        }

        if (bestIdx != -1)
        {

            allocation[i] = bestIdx;

            avail_block[bestIdx]=0;
        }
    }

    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
        printf(" %d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d", allocation[i] + 1);
        else
            printf("Not Allocated");
        printf("\n");
    }
}

void worstFit(int blockSize[], int m, int processSize[], int n)
{
    int allocation[n];
    int avail_block[m];
    for (int i = 0; i < n; i++)
        allocation[i] = -1;
    for(int i=0; i<m; i++)
    {
            avail_block[i]=1;
    }
    for (int i = 0; i < n; i++)
    {
        int wstIdx = -1;
        for (int j = 0; j < m; j++)
        {
            if (blockSize[j] >= processSize[i] && avail_block[j]==1)
            {
                if (wstIdx == -1)
                    wstIdx = j;
                else if (blockSize[wstIdx] < blockSize[j])
                    wstIdx = j;
            }
        }

        if (wstIdx != -1)
        {
            allocation[i] = wstIdx;
            avail_block[wstIdx]=0;
        }
    }
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
        printf(" %d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d", allocation[i] + 1);
        else
            printf("Not Allocated");
        printf("\n");
    }
}

int main()
{
    printf("\n --- First Fit ---");
    int m;
    int n;
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    m = sizeof(blockSize) / sizeof(blockSize[0]);
    n = sizeof(processSize) / sizeof(processSize[0]);
    firstFit(blockSize, m, processSize, n);
    printf("\n --- Next Fit ---");
    int m4;
    int n4;
    int blockSize4[] = {100, 500, 200, 300, 600};
    int processSize4[] = {212, 417, 112, 426};
    m4 = sizeof(blockSize4) / sizeof(blockSize4[0]);
    n4 = sizeof(processSize4) / sizeof(processSize4[0]);
    nextFit(blockSize4, m4, processSize4, n4);
    printf("\n--- Best Fit ---");
    int m1;
    int n1;
    int blockSize1[] = {100, 500, 200, 300, 600};
    int processSize1[] = {212, 417, 112, 426};
    m1 = sizeof(blockSize1) / sizeof(blockSize1[0]);
    n1 = sizeof(processSize1) / sizeof(processSize1[0]);
    bestFit(blockSize1, m1, processSize1, n1);
    printf("\n--- Worst Fit ---");
    int m2;
    int n2;
    int blockSize2[] = {100, 500, 200, 300, 600};
    int processSize2[] = {212, 417, 112, 426};
    m2 = sizeof(blockSize2) / sizeof(blockSize2[0]);
    n2 = sizeof(processSize2) / sizeof(processSize2[0]);
    worstFit(blockSize2, m2, processSize2, n2);
    return 0;
}
